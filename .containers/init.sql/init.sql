CREATE TABLE IF NOT EXISTS Users(
	UserID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	Username TEXT NOT NULL,
	PasswordHashed TEXT NOT NULL,
	Email TEXT NOT NULL,
	RegistrationDate TIMESTAMP(0) NOT NULL,
	LastLoginDate TIMESTAMP(0)
);

CREATE TABLE IF NOT EXISTS NetflixUsers(
	NetflixUserID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Country TEXT,
	Age INT,
	Gender TEXT,
	Device TEXT
);

CREATE TABLE IF NOT EXISTS SubscriptionDetails(
	ID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	fk_NetflixUserID INT,
	SubscriptionType TEXT,
	MonthyRevenue INT,
	JoinDate DATE,
	LastPaymentDate DATE,
	PlanDurationInDays INT,
	CONSTRAINT fk_NetflixUserId
		FOREIGN KEY(fk_NetflixUserID)
			REFERENCES NetflixUsers(NetflixUserID)
);

CREATE TABLE IF NOT EXISTS RefreshTokens(
	RefreshTokenID INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	RefreshToken TEXT,
	Lifetime_in_hours INT,
	CreationDate TIMESTAMP(0),
	fk_UserID INT,
	CONSTRAINT fk_UserID
		FOREIGN KEY(fk_UserID)
			REFERENCES Users(UserID)
);


CREATE OR REPLACE FUNCTION fn_GetUser(
	input_username TEXT,
	input_password TEXT)
RETURNS TABLE(result_userID INT, 
			  result_username TEXT, 
			  resutl_email TEXT, 
			  result_registrationdate TIMESTAMP(0), 
			  result_lastlogindate TIMESTAMP(0))
AS
$body$
BEGIN	
	UPDATE Users
	SET LastLoginDate = CURRENT_TIMESTAMP(0)
	WHERE Username = $1 AND PasswordHashed = crypt($2, PasswordHashed);
	
	RETURN QUERY
	SELECT UserID,Username,Email,RegistrationDate,LastLoginDate
	FROM Users
	WHERE Username = $1 AND PasswordHashed = crypt($2, PasswordHashed);
END;
$body$
LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION fn_GetUserByRefreshToken(
	input_refreshToken TEXT)
RETURNS TABLE(result_userID INT, 
			  result_username TEXT, 
			  resutl_email TEXT, 
			  result_registrationdate TIMESTAMP(0), 
			  result_lastlogindate TIMESTAMP(0),
			  result_refreshToken TEXT,
			  result_lifetime_in_hours INT,
			  result_creationdate TIMESTAMP(0))
AS
$body$
BEGIN
	RETURN QUERY
	SELECT UserID,Username,Email,RegistrationDate,LastLoginDate,RefreshToken,Lifetime_in_hours,CreationDate
	FROM Users JOIN RefreshTokens ON Users.UserID = RefreshTokens.fk_UserID
	WHERE RefreshToken = $1;
END;
$body$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION fn_GenerateRefreshToken(
	input_Lifetime_in_hours INT,
	input_fkUserID INT)
RETURNS TABLE (result_refreshToken TEXT,
			  result_lifetime_in_hours INT,
			  result_creationdate TIMESTAMP(0))
AS
$body$
DECLARE new_refreshToken TEXT = crypt(gen_random_uuid()::TEXT,gen_salt('bf'));
BEGIN
	INSERT INTO RefreshTokens(RefreshToken,Lifetime_in_hours,CreationDate,fk_UserID)
	VALUES (
		new_refreshToken,
		$1,
		CURRENT_TIMESTAMP(0),
		$2);
		
	RETURN QUERY
	SELECT refreshToken,lifetime_in_hours,creationdate
	FROM RefreshTokens
	WHERE RefreshToken = new_refreshToken;
END;
$body$
LANGUAGE PLPGSQL;





CREATE OR REPLACE FUNCTION fn_InsertUser(
	input_username TEXT,
	input_password TEXT,
	input_email TEXT)
RETURNS BOOLEAN
AS
$body$
BEGIN
	INSERT INTO Users(Username, PasswordHashed, Email, RegistrationDate, LastLoginDate)
	VALUES (
		$1, 
		crypt($2,gen_salt('bf')),
		$3,
		CURRENT_TIMESTAMP(0),
		CURRENT_TIMESTAMP(0));
		RETURN FOUND;
END;
$body$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION fn_InsertNetflixUser(
	input_netflixUserID INT,
	input_country TEXT,
	input_age INT,
	input_gender TEXT,
	input_device TEXT)
RETURNS BOOLEAN
AS
$body$
BEGIN
	INSERT INTO NetflixUsers(NetflixUserID,Country,Age,Gender,Device)
	VALUES (
		$1,
		$2,
		$3,
		$4,
		$5);
	RETURN FOUND;
END;
$body$
LANGUAGE PLPGSQL;





CREATE OR REPLACE FUNCTION fn_InsertSubscrptionDetail(
	input_netflixUserID INT,
	input_subscriptionType TEXT,
	input_monthlyRevenue INT,
	input_joinDate DATE,
	input_lastPaymentDate DATE,
	input_PlanDurationInDays INT)
RETURNS BOOLEAN
AS
$body$
BEGIN
	INSERT INTO SubscriptionDetails(fk_NetflixUserID,SubscriptionType,MonthyRevenue,JoinDate,LastPaymentDate,PlanDurationInDays)
	VALUES (
		$1,
		$2,
		$3,
		$4,
		$5,
		$6);
		RETURN FOUND;
END;
$body$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION fn_GetAllNetflixUses()
RETURNS TABLE(result_netflixUserId INT, 
			  result_country TEXT, 
			  resutl_age INT, 
			  result_gender TEXT, 
			  result_device TEXT,
			  result_subscriptionType TEXT,
			  result_monthlyRevenue INT,
			  result_joinDate DATE,
			  result_lastPaymentDate DATE,
			  result_plandDurationInDays INT)
AS
$body$
BEGIN	
	RETURN QUERY
	SELECT NetflixUserID,Country,Age,Gender,Device,SubscriptionType,MonthyRevenue,JoinDate,LastPaymentDate,PlanDurationInDays
	FROM NetflixUsers JOIN SubscriptionDetails ON NetflixUserID = fk_NetflixUserID;
END;
$body$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fn_CheckNetflixUserId(
	input_id INT)
RETURNS BOOLEAN
AS
$body$
BEGIN
	PERFORM netflixUserId
	FROM netflixusers
	WHERE $1 = netflixUserId;
	RETURN FOUND;
END;
$body$
LANGUAGE PLPGSQL;

SELECT fn_GetAllNetflixUses()
